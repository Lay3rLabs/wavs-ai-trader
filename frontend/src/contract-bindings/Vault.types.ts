/* eslint-disable @typescript-eslint/no-empty-object-type */
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.13.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export interface InstantiateMsg {
  initial_whitelisted_denoms: string[];
  service_manager: string;
  skip_entry_point: string;
}
export type ExecuteMsg = VaultExecuteMsg | ServiceHandlerExecuteMessages;
export type VaultExecuteMsg =
  | {
      deposit: {};
    }
  | {
      withdraw: {
        shares: Uint256;
      };
    }
  | {
      update_whitelist: {
        to_add?: string[] | null;
        to_remove?: string[] | null;
      };
    }
  | {
      update_prices: {
        prices: PriceInfo[];
        swap_routes?: SwapRoute[] | null;
      };
    }
  | {
      manual_trigger: {};
    }
  | {
      update_ownership: Action;
    };
export type Uint256 = string;
export type Decimal256 = string;
export type Uint128 = string;
export type Binary = string;
export type Timestamp = Uint64;
export type Uint64 = string;
export type Action =
  | {
      transfer_ownership: {
        expiry?: Expiration | null;
        new_owner: string;
      };
    }
  | "accept_ownership"
  | "renounce_ownership";
export type Expiration =
  | {
      at_height: number;
    }
  | {
      at_time: Timestamp;
    }
  | {
      never: {};
    };
export type ServiceHandlerExecuteMessages = {
  wavs_handle_signed_envelope: {
    envelope: WavsEnvelope;
    signature_data: WavsSignatureData;
  };
};
export type WavsEnvelope = Binary;
export type HexBinary = string;
export type EvmAddr = string;
export interface PriceInfo {
  denom: string;
  price_usd: Decimal256;
  decimals: number;
}
export interface SwapRoute {
  amount_in: Uint128;
  ask_denom: string;
  estimated_amount_out: Uint128;
  minimum_amount_out?: Uint128 | null;
  offer_denom: string;
  operations: SwapOperation[];
  swap_venue_name: string;
  timeout: Timestamp;
}
export interface SwapOperation {
  denom_in: string;
  denom_out: string;
  interface?: Binary | null;
  pool: string;
}
export interface WavsSignatureData {
  reference_block: number;
  signatures: HexBinary[];
  signers: EvmAddr[];
}
export type QueryMsg = VaultQueryMsg | ServiceHandlerQueryMessages;
export type VaultQueryMsg =
  | {
      get_total_shares: {};
    }
  | {
      get_vault_value: {};
    }
  | {
      get_whitelisted_denoms: {};
    }
  | {
      get_deposit_request: {
        deposit_id: number;
      };
    }
  | {
      list_deposit_requests: {
        limit?: number | null;
        start_after?: number | null;
      };
    }
  | {
      get_vault_assets: {};
    }
  | {
      get_vault_asset_balance: {
        denom: string;
      };
    }
  | {
      get_total_pending_assets: {};
    }
  | {
      get_pending_asset_balance: {
        denom: string;
      };
    }
  | {
      get_price: {
        denom: string;
      };
    }
  | {
      get_prices: {};
    }
  | {
      get_vault_state: {};
    }
  | {
      ownership: {};
    };
export type ServiceHandlerQueryMessages = {
  wavs_service_manager: {};
};
export interface MigrateMsg {}
export type DepositState =
  | "pending"
  | {
      completed: {
        value_usd: Decimal256;
      };
    };
export type Addr = string;
export interface DepositRequest {
  coins: Coin[];
  id: number;
  state: DepositState;
  user: Addr;
}
export interface Coin {
  amount: Uint256;
  denom: string;
}
export type ArrayOfCoin = Coin[];
export type ArrayOfPriceInfo = PriceInfo[];
export interface VaultState {
  funds: Coin[];
  total_pending_assets: Coin[];
  prices: PriceInfo[];
  tvl: Decimal256;
}
export type ArrayOfString = string[];
export type ArrayOfDepositRequest = DepositRequest[];
export interface OwnershipForString {
  owner?: string | null;
  pending_expiry?: Expiration | null;
  pending_owner?: string | null;
}
